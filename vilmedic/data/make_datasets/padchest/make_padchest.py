import csv
import random
import os
import re
import argparse

DATA_PATH = os.path.join(__file__.split('vilmedic/data/')[0], 'vilmedic/data/')

random.seed(42)

study_without_image = ['216840111366964012989926673512011132200139442', '216840111366964013076187734852011291090445391',
                       '216840111366964012373310883942009117084022290', '216840111366964012989926673512011101154138555',
                       '216840111366964012339356563862009072111404053', '216840111366964012283393834152009033102258826',
                       '216840111366964012373310883942009170084120009', '216840111366964012339356563862009068084200743',
                       '216840111366964012558082906712009300162151055', '216840111366964012989926673512011074122523403',
                       '216840111366964012558082906712009327122220177', '216840111366964012959786098432011033083840143',
                       '216840111366964013076187734852011178154626671', '216840111366964012819207061112010306085429121',
                       '216840111366964012819207061112010315104455352', '216840111366964012819207061112010307142602253']
study_without_labels = ['216840111366964013829543166512013354131013504',
                        '216840111366964013686042548532013203142528282', '12752243479320242391263',
                        '216840111366964013686042548532013274120824884',
                        '216840111366964013686042548532013274120824884',
                        '216840111366964013663026955732013123120852254',
                        '216840111366964013829543166512013318092424147',
                        '216840111366964013590140476722013044083832376',
                        '216840111366964013590140476722013044083832376',
                        '216840111366964013686042548532013205085737021',
                        '216840111366964013686042548532013254090926379',
                        '216840111366964013686042548532013247140116881',
                        '216840111366964013686042548532013267121025592',
                        '216840111366964012819207061112010232103830448',
                        '216840111366964013575787468332013009185922314',
                        '216840111366964013575787468332013009185922314',
                        '216840111366964013590140476722013035135755575',
                        '216840111366964013829543166512013339123309495',
                        '216840111366964013829543166512013339123309495',
                        '216840111366964013590140476722013061135214841',
                        '216840111366964013890096849122014008125244697',
                        '216840111366964014008416513202014204111630122',
                        '216840111366964014008416513202014204111630122',
                        '216840111366964013217898866992011325143448588',
                        '216840111366964013197700988782011301111315765',
                        '216840111366964013076187734852011300110908585',
                        '216840111366964013076187734852011164172546271',
                        '216840111366964013076187734852011160102135772',
                        '216840111366964013076187734852011164172546271',
                        '216840111366964013418328332882012191143253738',
                        '216840111366964013418328332882012191143253738',
                        '216840111366964014008416513202014185102150040',
                        '216840111366964013307756408102012072135536426',
                        '216840111366964013962490064942014115085202842',
                        '216840111366964013962490064942014119103624051',
                        '216840111366964013962490064942014119080831291', '12752243479320241529238',
                        '216840111366964013375835044302012152132700237',
                        '216840111366964013375835044302012152132700237',
                        '216840111366964013916396606442014042165529529',
                        '216840111366964013962490064942014125132720826',
                        '216840111366964013916396606442014049133042568',
                        '216840111366964014008416513202014209122350159',
                        '216840111366964012558082906712010126092547362',
                        '216840111366964012558082906712010126092547362',
                        '216840111366964012558082906712010109083358609',
                        '216840111366964012734950068292010146094400240',
                        '216840111366964012734950068292010146094400240',
                        '216840111366964012558082906712010106122145576',
                        '216840111366964012819207061112010263134826461',
                        '216840111366964012819207061112010263134826461',
                        '216840111366964012558082906712010103111252603',
                        '216840111366964012558082906712010040085705351', '128260136800431110503012920110518935170',
                        '216840111366964012989926673512011139132439906',
                        '216840111366964013076187734852011200164214677',
                        '216840111366964012989926673512011136134324506',
                        '216840111366964012989926673512011139132439906',
                        '216840111366964012989926673512011090140247287',
                        '216840111366964012989926673512011090140247287',
                        '216840111366964012373310883942009163104939937',
                        '216840111366964012373310883942009163104939937', '128260136800431110503012920110518935170',
                        '216840111366964012373310883942009125084757751',
                        '216840111366964012989926673512011139131358302',
                        '216840111366964012959786098432011052112219013',
                        '216840111366964013076187734852011291104110010',
                        '216840111366964013076187734852011291104110010',
                        '216840111366964013076187734852011294141404472',
                        '216840111366964013199786354762011303123508535',
                        '216840111366964013076187734852011248111707968',
                        '216840111366964013076187734852011249084855200',
                        '216840111366964013076187734852011245135941438',
                        '216840111366964012373310883942009138150550796',
                        '216840111366964012373310883942009138150550796',
                        '216840111366964012948363412702011020125510555',
                        '216840111366964012373310883942009151155613395',
                        '216840111366964012373310883942009151155613395',
                        '216840111366964012989926673512011119111754615',
                        '216840111366964012989926673512011117100341427',
                        '216840111366964012959786098432011040191926952',
                        '216840111366964012959786098432011046091059118',
                        '216840111366964013076187734852011292095619457',
                        '216840111366964013076187734852011291143700903',
                        '216840111366964013076187734852011251134008257',
                        '216840111366964013076187734852011251114210427',
                        '216840111366964013076187734852011252083718267',
                        '216840111366964013076187734852011250085906606',
                        '216840111366964013076187734852011244084647071',
                        '216840111366964013076187734852011200164214677',
                        '216840111366964012339356563862009076081758934',
                        '216840111366964012339356563862009076081758934',
                        '216840111366964012989926673512011109100409632',
                        '216840111366964012959786098432011045120845325',
                        '216840111366964013076187734852011244084647071',
                        '216840111366964013076187734852011252093332630',
                        '216840111366964013076187734852011252093332630',
                        '216840111366964012989926673512011103164418814',
                        '216840111366964013199786354762011303123508535',
                        '216840111366964012959786098432011040191926952',
                        '216840111366964013076187734852011255103034432',
                        '216840111366964012922382741642010362084250390',
                        '216840111366964012819207061112010306113210061']
excluded_reports = {' . . . .', ' epoc . espondilosis .', ' normal . tac', ' control .', ' cardiomegali', ' neumoni',
                    ' . escoliosis', ' granulom .', ' normal .', ' . . . . impresi', ' impresion .', ' . . impesion',
                    ' ipresion', ' . . epoc . bronquiectasi .', ' . . . . ipresion', ' epoc', ' bronquiectasi .',
                    ' cardiomegali .', ' estabil .', ' . . interpretacion', ' impreion', ' p', ' . . . . impresiond',
                    ' torax', ' nan', ' impresi', ' neumotorax .', ' torax . normal', ' epoc . cardiomegali',
                    ' normal . . . .', ' epoc . enfisem .', ' c', ' exam', ' traqueostomi .', ' impesion',
                    ' bronquiectasi', ' sin', ' aere', ' impreesion', ' preoperatori . normal .', ' impreson',
                    ' enfisem .', ' icc . ascitis .', ' normal . canal', ' no', ' proyeccion', ' . epoc .',
                    ' interpretacion', ' nornmal', ' . . . . . .', ' cardiomegali . cifoescoliosis .', ' mpresion',
                    ' escoliosis .', ' preoperatori . cardiomegali .', ' present', ' i', ' bronconeumoni',
                    ' . cardiomegali .', ' epoc .', ' . . epoc . ginecomasti .', ' imresion', ' imnpresion',
                    ' . interpretacion', ' . . . . impreison', ' posteroanterior', ' cervicoartrosis .', ' impresion',
                    ' control', ' . . . . normal .', ' epoc . cardiomegali .', ' indic', ' ginecomasti .',
                    ' marcapas .', ' . normal', ' 10', ' implantafix', ' granulom', ' . . . . imresion', ' . normal .',
                    ' demenci .', 'nan', ' neumoperitone .', ' . . . . nefrectomi', ' i .', ' . . . . cardiomegali .',
                    ' motiv', ' . . . . normal', ' descart .', ' neumoni .', ' pa', ' bronconeumoni .', ' lesion',
                    ' normal', ' preoperatori . torax', ' cardiomegali . dai .', ' marcapas . cardiomegali .',
                    ' impresiond', ' impreison', ' cardiomegali . epoc .', ' cardiomegali . marcapas .', ' impresoon',
                    ' icc .', ' inpresion', ' presion', ' torax . normal .'}

parser = argparse.ArgumentParser()
parser.add_argument('--task', required=True, choices=["rrg", "rrs", "selfsup"])
args = parser.parse_args()


def _open(str, mode, method_label='all'):
    path = os.path.join(DATA_PATH, args.task.upper(), "padchest", method_label)
    os.makedirs(path, exist_ok=True)
    return open(os.path.join(path, str), mode)


if __name__ == '__main__':
    reports = []
    labels = []
    images = []

    reports_physician = []
    labels_physician = []
    images_physician = []
    for row in csv.DictReader(open("PADCHEST_chest_x_ray_images_labels_160K_01.02.19.csv")):
        if row['StudyID'] not in (study_without_image + study_without_labels) and row['Report'] not in excluded_reports:
            reports.append(re.sub("\s+", " ", row['Report']))
            labels.append(row['Labels'].strip())
            images.append(row['ImageID'].strip())

            if row['MethodLabel'] == 'Physician':
                reports_physician.append(re.sub("\s+", " ", row['Report']))
                labels_physician.append(row['Labels'].strip())
                images_physician.append(row['ImageID'].strip())

    for method_label, lists in [["all", zip(reports, labels, images)],
                                ["physician", zip(reports_physician, labels_physician, images_physician)]]:
        c = list(lists)
        random.shuffle(c)
        reports, labels, images = zip(*c)

        l_rep = len(reports)
        print("Method label: {}, num samples: {}".format(method_label, l_rep))
        _open('train.report.tok', 'w', method_label).write('\n'.join([report for report in
                                                                      reports[:int(l_rep * 0.8)]
                                                                      ]
                                                                     ))
        _open('train.image.tok', 'w', method_label).write('\n'.join(images[:int(l_rep * 0.8)]))
        _open('train.label.tok', 'w', method_label).write(
            '\n'.join([','.join([w.strip() for w in eval(label)]) for label in labels[:int(l_rep * 0.8)]]))

        _open('validate.report.tok', 'w', method_label).write('\n'.join([report for report in
                                                                         reports[int(l_rep * 0.8):int(l_rep * 0.9)]
                                                                         ]
                                                                        ))
        _open('validate.image.tok', 'w', method_label).write('\n'.join(images[int(l_rep * 0.8):int(l_rep * 0.9)]))
        _open('validate.label.tok', 'w', method_label).write(
            '\n'.join(
                [','.join([w.strip() for w in eval(label)]) for label in labels[int(l_rep * 0.8):int(l_rep * 0.9)]]))

        _open('test.report.tok', 'w', method_label).write('\n'.join([report for report in
                                                                     reports[int(l_rep * 0.9):]
                                                                     ]
                                                                    ))
        _open('test.image.tok', 'w', method_label).write('\n'.join(images[int(l_rep * 0.9):]))
        _open('test.label.tok', 'w', method_label).write(
            '\n'.join([','.join([w.strip() for w in eval(label)]) for label in labels[int(l_rep * 0.9):]]))
